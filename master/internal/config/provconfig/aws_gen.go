//go:build ignore

package main

import (
	"fmt"
	"os"
	"sort"

	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/ec2"
)

func main() {
	f, err := os.Create(os.Args[3])
	if err != nil {
		panic(err)
	}
	defer f.Close()

	slots := getEc2InstanceSlots()
	keys := make([]string, 0, len(slots))
	for k := range slots {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	fmt.Fprintln(f, "package", os.Args[1])
	fmt.Fprintln(f, "// Code generated by go run aws_gen.go. DO NOT EDIT.")
	fmt.Fprintln(f, "var", os.Args[2], "=", "map[string]int{")
	for _, key := range keys {
		fmt.Fprintf(f, "\t%q:\t%+v,\n", key, slots[key])
	}
	fmt.Fprintln(f, "}")
}

func getEc2InstanceSlots() map[string]int {
	result := map[string]int{}
	sess := getEC2Sess()
	input := &ec2.DescribeInstanceTypesInput{}

	for {
		instances, err := sess.DescribeInstanceTypes(input)
		if err != nil {
			panic(err)
		}
		for _, instance := range instances.InstanceTypes {
			gpuInfo := instance.GpuInfo
			gpuCount := 0
			if gpuInfo != nil {
				for _, g := range gpuInfo.Gpus {
					gpuCount += int(*g.Count)
				}
			}
			result[*instance.InstanceType] = gpuCount
		}
		if instances.NextToken == nil {
			break
		}
		input.NextToken = instances.NextToken
	}
	return result
}

func getEC2Sess() *ec2.EC2 {
	sess := session.Must(session.NewSessionWithOptions(session.Options{
		SharedConfigState: session.SharedConfigEnable,
	}))
	return ec2.New(sess)
}
